#!/bin/bash

#/ NAME
#/     build vagrant -- builds a vagrant box
#/
#/ SYNOPSIS
#/   bin/build vagrant
#/
#/ EXAMPLES
#/     $ bin/build vagrant

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require awsme
require build

# entry point
function main {
  cd $shome
  time build_aws
}

function conf_aws {
  local id_ami="$1"; shift
  local nm_keypair="$1"; shift
  local pth_private_key_path="$1"; shift
  local pth_script="$1"; shift

  # AWS_ACCESS_KEY, AWS_SECRET_KEY

  local tmp_dna="$(mktemp -t XXXXXXXXX)"
  cat > "$tmp_dna" <<EOF
  { 
    "run_list": ["vagrant::aws"], 
    "vagrant": { 
      "box": "dummy",
      "provision": { "shell": { "path": "$pth_script" }},
      "access_key_id": "$AWS_ACCESS_KEY",
      "secret_access_key": "$AWS_SECRET_KEY",
      "keypair_name": "$nm_keypair",
      "ami": "$id_ami",
      "instance_type": "m1.large",
      "ssh_username": "ubuntu",
      "ssh_private_key_path": "$pth_private_key_path"
    }
  }
EOF
  $shome/bin/cook -j "$tmp_dna"
  rm -f "$tmp_dna"
}

function build_aws {
  local id_instance

  mkdir -p "$shome/vagrant.aws"

  # build keypair
  local nm_keypair="tmp-build-ami-keypair-$(date +%s)-$$"
  rm -f "$shome/vagrant.aws/.id_rsa"
  ssh-keygen -N "" -f "$shome/vagrant.aws/.id_rsa"
  ec2-import-keypair --region $FLAGS_region --public-key-file "$shome/vagrant.aws/.id_rsa.pub" $nm_keypair

  # import ubuntu box and destroy lingering vagrant
  bundle exec vagrant box add dummy $shome/boxes/dummy.box --provider aws || true
  conf_aws "$(pick_ami)" "$nm_keypair" "$shome/vagrant.aws/.id_rsa" "$shome/bootstrap/ubuntu.sh"
  rsync -ia "$shome/Vagrantfile" "$shome/vagrant.aws/Vagrantfile"

  cd "$shome/vagrant.aws"
  bundle exec vagrant destroy -f || true
  bundle exec vagrant up --provider aws
  local id_instance="$(cat $shome/vagrant.aws/.vagrant/machines/default/aws/id)"

  # wait for script to finish
  until_ec2 "stopped" "terminated"

  # detect early termination
  local status="$(instance_status)"
  if [[ "$status" = "terminated" ]]; then
  logger_fatal "Instance terminated after bootstrap, expecting stopped"
    return 1
  fi

  # bundle ami
  local nm_ami=`date "+base_%Y-%m-%d-%H-%M"`
  local id_image="$(ec2-create-image --region "$FLAGS_region" -K $EC2_PRIVATE_KEY -C $EC2_CERT -n $nm_ami $id_instance | awk '$1 == "IMAGE" {print $2}')"
  ec2-terminate-instances --region "$FLAGS_region" $id_instance
  until_ami "$id_image" available

  cd "$shome"

  # delete ssh keys
  ec2-delete-keypair --region $FLAGS_region $nm_keypair
}

function instance_status {
  ec2-describe-instances --region "$FLAGS_region" "$id_instance" | awk '$1 == "INSTANCE" { print $4 }'
}

function image_status {
  ec2-describe-images --region "$FLAGS_region" "$id_image" | awk '$1 == "IMAGE" { print $5 }'
}

require sub "$BASH_SOURCE" "$@"
