#!/bin/bash

require build

DEFINE_string "boxname" "dummy" "Vagrant box name"
DEFINE_string "vagrantbox" "$shome/boxes/dummy.box" "Vagrant box path"
DEFINE_string "bootstrap" "$shome/bootstrap/ubuntu.sh" "Initial bootstrap script" 
DEFINE_string "ami" "" "AMI to use for bootstrap, defaults to latest Ubuntu cloud image"

function pick_ami {
	# This selects the most recent release Ubuntu cloud image
  curl -s http://cloud-images.ubuntu.com/rss/${FLAGS_release}-release.xml | \
    awk '$1 ~ /^<br>/ { sub(/^<br>/, "", $0); print }' | \
    awk -v region="$FLAGS_region" -v disk="$FLAGS_disk" -v arch="$FLAGS_arch" '$1 == region && $3 == arch && $4 == disk { ami = $2 } END { print ami }'
}

function while_ec2 {
  logger_info "while $@"

  while true; do
    local status="$(instance_status)"

    local wanted
    for wanted in "$@"; do
      if [[ "$status" = "$wanted" || -z "$status" ]]; then
        echo -n "."
        sleep 5
        continue 2
      fi
    done

    break
  done
  
  echo
}

function until_vagrant {
  logger_info "waiting for $@"

  while true; do
    local status="$(instance_status)"

    local wanted
    for wanted in "$@"; do
      if [[ "$status" = "$wanted" ]]; then
        break 2
      fi
    done
    echo -n "."
    sleep 5
  done

  echo
}

function until_ami {
  logger_info "waiting for $@"

  local id_ami="$1"; shift

  while true; do
    local status="$(image_status "$id_ami")"

    local wanted
    for wanted in "$@"; do
      if [[ "$status" = "$wanted" ]]; then
        break 2
      elif [[ "$status" = "failed" ]]; then
        logger_fatal "ami failed to bundle"
        exit 1
      fi
    done
    echo -n "."
    sleep 5
  done

  echo
}

function instance_status {
  id_instance="$(cat $release_dir/.vagrant/machines/default/aws/id)"
  ec2-describe-instances --region "$FLAGS_region" "$id_instance" | awk '$1 == "INSTANCE" { print $4 }'
}

function image_status {
  ec2-describe-images --region "$FLAGS_region" "$id_image" | awk '$1 == "IMAGE" { print $5 }'
}

function conf_vagrant {
  local release_dir="$1"; shift
  local pth_script="$1"; shift
  local nm_box="dummy"
  local id_ami="$1"; shift
  local nm_keypair="$1"; shift
  local pth_private_key_path="$1"; shift


  local tmp_dna="$(mktemp -t XXXXXXXXX)"
  cat > "$tmp_dna" <<EOF
  { 
    "run_list": ["vagrant::aws"], 
    "vagrant": { 
      "box": "$nm_box",
      "provision": { "shell": { "path": "$pth_script" }},
      "release_dir": "$release_dir",
      "access_key_id": "$AWS_ACCESS_KEY",
      "secret_access_key": "$AWS_SECRET_KEY",
      "keypair_name": "$nm_keypair",
      "ami": "$id_ami",
      "instance_type": "m1.large",
      "ssh_username": "ubuntu",
      "ssh_private_key_path": "$pth_private_key_path"
    }
  }
EOF
  $shome/bin/cook -j "$tmp_dna"
  rm -f "$tmp_dna"
}

function build_type {
  echo "ec2"
}

function build_keypair {
  local nm_keypair="tmp-build-ami-keypair-$(date +%s)-$$"
  {
    ssh-keygen -N "" -f "$release_dir/.id_rsa"
    ec2-import-keypair --region $FLAGS_region --public-key-file "$release_dir/.id_rsa.pub" $nm_keypair
  } 1>&2

  echo "$nm_keypair"
}

function delete_keypair {
  local nm_keypair="$1"; shift
  ec2-delete-keypair --region $FLAGS_region $nm_keypair
}

function import_ubuntu {
  bundle exec vagrant box add dummy $shome/boxes/dummy.box --provider aws || true
} 

function bootstrap_ubuntu {
  local nm_keypair="$1"; shift

  conf_vagrant "$release_dir" "$FLAGS_bootstrap" "${FLAGS_ami:-$(pick_ami)}" "$nm_keypair" "$release_dir/.id_rsa"
  (cd $release_dir && bundle exec vagrant up --provider aws)
  until_vagrant "stopped" "terminated"
} 

function early_termination {
  local status="$(instance_status)"
  if [[ "$status" = "terminated" ]]; then
    logger_fatal "Instance terminated after bootstrap, expecting stopped"
    return 1
  fi
} 

function build_specific {
  true
}

function bundle_vagrant {
  {
    local nm_ami=`date "+base_%Y-%m-%d-%H-%M"`
    local id_instance="$(cat $release_dir/.vagrant/machines/default/aws/id)"
    local id_image="$(ec2-create-image --region "$FLAGS_region" -K $EC2_PRIVATE_KEY -C $EC2_CERT -n $nm_ami $id_instance | awk '$1 == "IMAGE" {print $2}')"
    until_ami "$id_image" "available"
    (cd $release_dir && bundle exec vagrant destroy -f)
  } 1>&2

  echo "$id_image"
} 

function demo_vagrant {
  local nm_keypair="$1"; shift
  local id_image="$1"; shift
  conf_vagrant "$release_dir" "$shome/bootstrap/noop.sh" "$id_image" "$nm_keypair" "$release_dir/.id_rsa"
  (cd $release_dir && bundle exec vagrant up --provider aws)
  demo_in_vagrant "$@"
  (cd $release_dir && bundle exec vagrant destroy -f)
}

function demo_in_vagrant {
  (cd $release_dir && bundle exec vagrant ssh -- "$FLAGS_sshopts")
}

function forwarded_ssh_port {
  echo "22"
}



