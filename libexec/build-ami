#!/bin/bash

#/ NAME
#/     build ami -- builds an AMI image
#/
#/ SYNOPSIS
#/   bin/build ami
#/
#/ EXAMPLES
#/     $ bin/build ami

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require awsme
require build

# entry point
function main {
  local opt_ssh=

  if [[ "$FLAGS_sshagent" = "$FLAGS_TRUE" ]]; then
    opt_ssh="$opt_ssh -A"
  fi

  time build_ami
}

function instance_status {
  ec2-describe-instances --region "$FLAGS_region" "$id_instance" | awk '$1 == "INSTANCE" { print $4 }'
}

function image_status {
  ec2-describe-images --region "$FLAGS_region" "$id_image" | awk '$1 == "IMAGE" { print $5 }'
}

function run_ubuntu_base {
  local bootstrap=

  if [[ "$#" = 0 ]]; then
    bootstrap="$FLAGS_bootstrap"
  else
    bootstrap="$1"; shift
  fi

  local source_ami="$(pick_ami)"
  local tmp_run="$(mktemp -t XXXXXXXXX)"
  ec2-run-instances --region $FLAGS_region -K $EC2_PRIVATE_KEY -C $EC2_CERT $source_ami -n 1 -t $FLAGS_instype --instance-initiated-shutdown-behavior stop -f "$FLAGS_bootstrap" $opt_ec2 > "$tmp_run"
  cat "$tmp_run" 1>&2
  local id_instance="$(awk '$1 == "INSTANCE" {print $2}' "$tmp_run")"
  rm -f "$tmp_run"

  echo "$id_instance"
}

function run_clean_base {
  local source_ami="$1"; shift

  local tmp_run="$(mktemp -t XXXXXXXXX)"
  ec2-run-instances --region $FLAGS_region -K $EC2_PRIVATE_KEY -C $EC2_CERT $source_ami -n 1 -t $FLAGS_instype $opt_ec2 > "$tmp_run"
  cat "$tmp_run" 1>&2
  local id_instance="$(awk '$1 == "INSTANCE" {print $2}' "$tmp_run")"
  rm -f "$tmp_run"

  echo "$id_instance"
}

function build_ami {
  local opt_ec2=
  
  # build keypair
  local nm_keypair="tmp-build-ami-keypair-$(date +%s)-$$"
  if [[ -f "$FLAGS_sshauth" ]]; then
    ec2-import-keypair --region $FLAGS_region --public-key-file $FLAGS_sshauth $nm_keypair
    opt_ec2="-k $nm_keypair $opt_ec2"
  else
    opt_ec2="-k default $opt_ec2"
  fi

  # run instance
  local id_instance="$(run_ubuntu_base)"
  if [[ -z "$id_instance" ]]; then
    logger_fatal "could not find instance id"
    return 1
  fi

  # go from pending -> $hostname
  while_ec2 "pending"

  # wait for ssh to watch logs
  local hst_instance="$(instance_status)"
  until_port_open "$hst_instance" 22
  ssh $opt_ssh -o "StrictHostKeyChecking no" ubuntu@"$hst_instance" bash -c "'while [[ ! -f /var/log/awsme.log ]]; do sleep 1; done; tail -f /var/log/awsme.log'" || true
    
  # wait for script to finish
  until_ec2 "stopped" "terminated"

  # detect early termination
  local status="$(instance_status)"
  if [[ "$status" = "terminated" ]]; then
  logger_fatal "Instance terminated after bootstrap, expecting stopped"
    return 1
  fi

  # bundle ami
  local nm_ami=`date "+base_%Y-%m-%d-%H-%M"`
  local id_image="$(ec2-create-image --region "$FLAGS_region" -K $EC2_PRIVATE_KEY -C $EC2_CERT -n $nm_ami $id_instance | awk '$1 == "IMAGE" {print $2}')"
  ec2-terminate-instances --region "$FLAGS_region" $id_instance
  until_ami "$id_image" available

  # run the new ami
  id_instance="$(run_clean_base "$id_image")"
  if [[ -z "$id_instance" ]]; then
    logger_fatal "could not find instance id"
    return 1
  fi

  # go from pending -> $hostname
  while_ec2 "pending"
  
  # wait for ssh
  local hst_instance="$(instance_status)"
  until_port_open "$hst_instance" 22
  ssh $opt_ssh -o "StrictHostKeyChecking no" ubuntu@"$hst_instance" || true
  ec2-terminate-instances --region "$FLAGS_region" $id_instance

  # cleanup
  if [[ -f "$FLAGS_sshauth" ]]; then
    ec2-delete-keypair --region $FLAGS_region $nm_keypair
  fi
}

require sub "$BASH_SOURCE" "$@"
